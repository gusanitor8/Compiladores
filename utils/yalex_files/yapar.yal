{
tokens = set()
productions = []
productions_adress = {}
separator_found_ = False
ignore = set()

def add_adress(symbol: str, adress: int):
    if symbol in productions_adress:
        productions_adress[symbol].append(adress)
    else:
        productions_adress[symbol] = [adress]


def token_found(token_str: str):
    global separator_found_
    if separator_found_:
        raise Exception("Syntax error: separator found before token declaration was finished")

    token_str = token_str.strip()
    token_str = token_str[7:]

    token_str = token_str.split(" ")

    for i in range(len(token_str)):
        token_str[i] = token_str[i].strip()
        tokens.add(token_str[i])


def ignore_found(token_str: str):
    token_str = token_str.strip()
    token_str = token_str[7:]

    token_str = token_str.split(" ")

    for i in range(len(token_str)):
        token_str[i] = token_str[i].strip()
        ignore.add(token_str[i])


def production_found(token_str: str):
    item = token_str.split(":")
    rhs = item[1].strip()
    lhs = item[0].strip()

    rhs = rhs.split("|")

    for i in range(len(rhs)):
        if rhs[i][-1] == ";":
            rhs[i] = rhs[i][:-1]

        rhs[i] = rhs[i].strip()
        rhs[i] = rhs[i].split(" ")

        for j in range(len(rhs[i])):
            rhs[i][j] = rhs[i][j].strip()

    for rule in rhs:
        dic = {str(lhs): rule}
        productions.append(dic)
        add_adress(lhs, len(productions) - 1)

def separator_found():
    global separator_found_
    separator_found_ = True


}

%%

let ws = ["\s\t\n"]
let sep = ws%%ws
let coso = %token\s+['A'-'Z']+(\s['A'-'Z']+)*
let production = ['a'-'z']+\s*:(ws*(['a'-'z']+|['A'-'Z']+)ws+'|'?)+;
let ignore = IGNORE\s+['A'-'Z']+
let comment = /'*'(_|\s)*'*'/

(* token_string es una variable especial que nos permite acceder al token *)

rule tokens =
      ws            { print("WS") }
    |sep            { separator_found() }
    |coso           { token_found(token_string) }
    |ignore         { ignore_found(token_string) }
    |production     { production_found(token_string) }
    |comment        { print("COMMENT") }

%%

{
if not separator_found_:
    raise Exception("Syntax error: separator not found")

return tokens, productions, productions_adress
}
